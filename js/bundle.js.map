{"version":3,"sources":["webpack:///webpack/bootstrap eaaa0a6b62431c3858cc","webpack:///./js/planary.js","webpack:///./js/game.js","webpack:///./js/edge.js","webpack:///./js/util.js","webpack:///./js/vertex.js","webpack:///./js/graph.js","webpack:///./js/game_view.js","webpack:///./constants.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,EAAC;;;;;;;AC1BD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAe,sBAAsB;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,kBAAiB,iBAAiB;;AAElC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oCAAmC,uBAAuB;AAC1D;;AAEA;AACA,0BAAyB,2EAA2E;AACpG;;AAEA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;ACtEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;AClEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvBA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,oBAAmB,QAAQ;AAC3B,wBAAuB,KAAK;AAC5B,sBAAqB,EAAE,GAAG,EAAE;AAC5B;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA,6BAA4B,qCAAqC;AACjE,6BAA4B,qCAAqC;;AAEjE;AACA;AACA,8BAA6B,0BAA0B;AACvD,wBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA,mCAAkC;AAClC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B,+BAA+B;AAC9D;;AAEA,QAAO;;AAEP;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA,sBAAqB,4BAA4B;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,MAAK;;AAEL;AACA;;AAEA;;AAEA;;;;;;;AC5FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,MAAK;AACL;AACA;AACA,4BAA2B,gBAAgB;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAoB,gBAAgB;AACpC;AACA,QAAO;;AAEP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;;AAEH,yBAAwB,OAAO;;AAE/B;AACA;AACA;AACA;AACA,iBAAgB,iBAAiB;AACjC,IAAG;AACH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAkC,uBAAuB,IAAI,uBAAuB;AACpF,mCAAkC,YAAY,IAAI,YAAY;AAC9D,mCAAkC,cAAc;AAChD;AACA,mCAAkC,aAAa;;AAE/C;AACA;AACA,0BAAyB,SAAS,IAAI,SAAS;AAC/C;;AAEA;AACA;AACA;AACA,4CAA2C,OAAO;;AAElD;AACA;AACA,aAAY;AACZ;AACA;AACA,MAAK;;AAEL,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;;AAER;AACA;AACA,SAAQ;AACR,IAAG;;AAEH;AACA;AACA,mCAAkC,YAAY,IAAI,YAAY;AAC9D;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;;;;;;;ACzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap eaaa0a6b62431c3858cc\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  console.log(\"DOMContentLoaded\");\n\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  if (window.innerHeight < window.innerWidth) {\n    Game.DIM_X = window.innerHeight * 0.8;\n    Game.DIM_Y = window.innerHeight * 0.8;\n  } else {\n    Game.DIM_X = window.innerWidth;\n    Game.DIM_Y = window.innerWidth;\n  }\n\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const rootEl = $('.planary-root');\n\n  // console.log('created ctx & game in planary.js');\n  // console.log(ctx);\n\n  new GameView(ctx, rootEl, 0);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/planary.js\n ** module id = 0\n ** module chunks = 0\n **/","const Edge = require(\"./edge\");\nconst Vertex = require(\"./vertex\");\nconst Util = require(\"./util\");\nconst Graph = require(\"./graph\");\nconst Constants = require('../constants');\n\nconst Game = function (level = 0) {\n  this.vertices = [];\n  this.edges = [];\n  this.level = level;\n\n  this.setPlaySize();\n  this.buildGraph(level);\n  this.setVertexSize();\n};\n\nGame.prototype.setPlaySize = function() {\n  const $board = $(\".canvas-div\");\n  $board.width(Game.DIM_X).height(Game.DIM_Y);\n\n  Game.leftOffset = (window.innerWidth - Game.DIM_X) / 2;\n  $board.css( {left: Game.leftOffset} );\n};\n\nGame.prototype.setVertexSize = function() {\n  // console.log(Game.DIM_X);\n  // console.log(this.level);\n  // console.log(this.vertices.length);\n\n  Vertex.RADIUS = (Game.DIM_X / this.vertices.length / 10) + 5;\n};\n\nGame.prototype.buildGraph = function(level) {\n\n  let edges = Graph.generateEdges(level);\n  let n = level+4;\n  let numVertices = n * (n-1)/2;\n\n  for (let j = 0; j < numVertices; j++) {\n\n    let xOffset = Game.DIM_X/2;\n    let yOffset = Game.DIM_Y/2;\n\n    let xResize = Game.DIM_X*0.35;\n    let yResize = Game.DIM_Y*0.35;\n\n    let x = Math.cos(j * 2 * Math.PI / numVertices) * xResize + xOffset;\n    let y = Math.sin(j * 2 * Math.PI / numVertices) * xResize + xOffset;\n\n    this.vertices.push(new Vertex({ x: x, y: y, index: j }) );\n  }\n\n  edges.forEach ( vertices => {\n    let edge = new Edge({ vertex1: this.vertices[vertices[0]], vertex2: this.vertices[vertices[1]] });\n    this.edges.push(edge);\n\n    this.vertices[vertices[0]].edges.push(edge);\n    this.vertices[vertices[1]].edges.push(edge);\n  });\n\n};\n\nGame.prototype.dropVertices = function() {\n  // console.log(\"Game.dropVertices() in game.js\");\n  this.vertices.forEach( vertex => {\n    vertex.selected = false;\n    vertex.color = Constants.COLOR;\n  });\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const Util = require(\"./util\");\nconst Constants = require('../constants');\n\nconst Edge = function(options) {\n  this.vertex1 = options.vertex1;\n  this.vertex2 = options.vertex2;\n  this.color = Constants.BLACK;\n};\n\nEdge.prototype.draw = function(ctx) {\n  if (this.intersecting) {\n    ctx.strokeStyle = Constants.LINE_INTERSECTING;\n  } else {\n    ctx.strokeStyle = Constants.BLACK;\n  }\n  ctx.beginPath();\n  ctx.moveTo(this.vertex1.x, this.vertex1.y);\n  ctx.lineTo(this.vertex2.x, this.vertex2.y);\n  ctx.stroke();\n};\n\nEdge.prototype.slope = function() {\n  return Util.slope(this.vertex1, this.vertex2);\n};\n\nEdge.prototype.xIntercept = function() {\n  return Util.xIntercept(this.vertex1, this.slope());\n};\n\nEdge.prototype.shareVertex = function(edge) {\n  return (\n    this.vertex1 === edge.vertex1\n    || this.vertex1 === edge.vertex2\n    || this.vertex2 === edge.vertex1\n    || this.vertex2 === edge.vertex2\n  );\n};\n\nEdge.prototype.intersectsAtX = function(edge) {\n  return (edge.xIntercept() - this.xIntercept()) / (this.slope() - edge.slope());\n};\n\nEdge.prototype.intersectsWith = function(edge) {\n  const x = this.intersectsAtX(edge);\n\n  const firstMin = Math.min(this.vertex1.x, this.vertex2.x);\n  const firstMax = Math.max(this.vertex1.x, this.vertex2.x);\n\n  const secondMin = Math.min(edge.vertex1.x, edge.vertex2.x);\n  const secondMax = Math.max(edge.vertex1.x, edge.vertex2.x);\n\n  const onFirst = (firstMin < x && x < firstMax);\n  const onSecond = (secondMin < x && x < secondMax);\n\n  return (onFirst && onSecond && !this.shareVertex(edge));\n};\n\nEdge.prototype.currentlyIntersecting = function(allEdges) {\n  this.intersecting = false;\n  allEdges.forEach( edge => {\n    if (this.intersectsWith(edge)) {\n      this.intersecting = true;\n    }\n  });\n}\n\nmodule.exports = Edge;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/edge.js\n ** module id = 2\n ** module chunks = 0\n **/","const Util = {\n  slope(vertex1, vertex2) {\n    return (vertex2.y - vertex1.y) / (vertex2.x - vertex1.x);\n  },\n\n  xIntercept(vertex, slope) {\n    return vertex.y - (slope * vertex.x);\n  },\n\n  dist(vertex1, vertex2) {\n    return Math.sqrt(\n      Math.pow(vertex1.x - vertex2.x, 2)\n        + Math.pow(vertex1.y - vertex2.y, 2)\n    );\n  },\n\n  angle(vertex1, vertex2) {\n    const diffY = vertex2.y - vertex1.y;\n    const diffX = vertex2.x - vertex1.x;\n    const radians = Math.atan( diffY / diffX );\n    return radians;\n    // return radians / 2 / Math.PI * 360;\n  },\n\n  distFromMouse(vertex, currentMousePos) {\n    const vertexRadius = 12.5;\n\n    return Math.sqrt(\n      Math.pow(vertex.x + vertexRadius - currentMousePos.x, 2) + Math.pow(vertex.y + vertexRadius - currentMousePos.y, 2)\n    );\n  }\n\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/util.js\n ** module id = 3\n ** module chunks = 0\n **/","const Constants = require('../constants');\n\nconst Vertex = function(options) {\n  this.index = options.index;\n  this.x = options.x;\n  this.y = options.y;\n  this.color = Constants.COLOR;\n  this.radius = Constants.RADIUS;\n  this.edges = [];\n  this.selected = false;\n};\n\nVertex.prototype.pos = function() {\n  return [this.x, this.y];\n};\n\nVertex.prototype.draw = function(ctx) {\n  ctx.fillStyle = this.color;\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, Vertex.RADIUS, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nmodule.exports = Vertex;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/vertex.js\n ** module id = 4\n ** module chunks = 0\n **/","const Edge = require(\"./edge\");\nconst Vertex = require(\"./vertex\");\nconst Util = require(\"./util\");\n\nconst Graph = {\n\n  pairIndex(n) {\n    let pairIndex = {};\n\n    let vertexIdx = 0;\n    for (let i = 0; i <= n; i++) {\n      for (let j = i+1; j<n; j++) {\n        pairIndex[`${i},${j}`] = vertexIdx;\n        vertexIdx++;\n      }\n    }\n\n    return pairIndex;\n  },\n\n  generateLines(n) {\n    let lines = [];\n    let slopes = [];\n\n    while (lines.length < n) {\n      let v1 = new Vertex( { x: Math.random(), y: Math.random() });\n      let v2 = new Vertex( { x: Math.random(), y: Math.random() });\n\n      let slope = Util.slope(v1, v2);\n      if (!slopes.includes(slope)) {\n        let line = new Edge({ vertex1: v1, vertex2: v2});\n        // lines.push({v1: v1, v2: v2, slope: slope});\n        lines.push(line);\n      }\n    }\n    // Check that this is generating liens correctly\n    return lines;\n  },\n\n  generateEdges(level) {\n    const n = level+4;\n\n    // Build pairIndex hash from { [pair]: indexOfVertex }\n    let pairIndex = this.pairIndex(n);\n\n    // Generate n * (n-1)/2 random lines of differing slope\n    const lines = this.generateLines(n);\n\n    // For each line, find the intersection of point\n    // of that line with all other lines\n    let edges = [];\n    lines.forEach( (line1, i1) => {\n      let intersections = [];\n\n      lines.forEach( (line2, i2) => {\n        if (i1 !== i2) {\n          let intersection = line1.intersectsAtX(line2);\n          intersections.push( { x: intersection, lineIdx: i2 } );\n        }\n\n      });\n\n      // Order lines by intersection point's X coord\n      intersections.sort( (intersect1, intersect2) => {\n        return intersect1.x - intersect2.x;\n      });\n\n      // For each pair of neighboring intersections\n      // create a new edge between them\n      for (let i = 0; i < intersections.length-1; i++) {\n        let l1 = intersections[i];\n        let l2 = intersections[i+1];\n\n        let indices1 = [i1, l1.lineIdx];\n        let indices2 = [i1, l2.lineIdx];\n\n        indices1.sort( (a, b) => a-b  );\n        indices2.sort( (a, b) => a-b  );\n\n        let v1 = pairIndex[indices1];\n        let v2 = pairIndex[indices2];\n\n        edges.push([v1, v2]);\n      }\n\n    });\n\n    return edges;\n  }\n\n};\n\nmodule.exports = Graph;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/graph.js\n ** module id = 5\n ** module chunks = 0\n **/","const Util = require(\"./util\");\nconst Game = require(\"./game\");\nconst Constants = require('../constants');\nconst Vertex = require('./vertex');\n\nconst GameView = function (ctx, root, level=1) {\n  this.ctx = ctx;\n  this.root = root;\n  this.currentMousePos = { x: -1, y: -1 };\n  this.level = level;\n\n  this.renderButtons();\n  this.bindButtonEvents();\n  this.playLevel(this.level);\n\n  // this.refreshIntervalId = setInterval( () => {\n  //   this.follow(this.game, this.currentMousePos);\n  //   this.renderGraph();\n  // }, 50);\n};\n\nGameView.prototype.playLevel = function() {\n  this.game = new Game(this.level);\n  console.log(this.game);\n  console.log(this);\n  console.log(\"GameView.playLevel\");\n\n  this.renderGraph();\n  this.renderModal();\n  this.bindGraphEvents();\n  // console.log(\"after this.bindGraphEvents in GameView()\");\n\n\n  this.refreshIntervalId = setInterval( () => {\n    this.follow(this.game, this.currentMousePos);\n    this.renderGraph();\n    // this.checkPlanarity();\n\n  }, 1);\n};\n\nGameView.prototype.renderModal = function() {\n  console.log(\"GameView.renderModal()\");\n  // let $modal = {};\n\n  const prevModals = document.getElementsByClassName(\"modal\");\n\n    if (prevModals.length > 0) {\n      const $modal = $(prevModals[0]);\n\n    } else {\n      const $modal = $(\"<div>\").addClass(\"modal\")\n                    .addClass(\"win-modal\")\n                    .css( {display: \"none\"} );\n\n      const $modalContent = $(\"<div>\").addClass(\"modal-content\");\n      const $text = $(\"<h2>\").text(\"Congratulations, you made the graph planar!\");\n\n      $modalContent.append($text);\n      $modal.append($modalContent);\n\n      const $nextButton = $(\"<a>\").text(\"Next Level\")\n                          .addClass(\"button\")\n                          .addClass(\"next-level-modal\");\n\n      $modalContent.append($nextButton);\n\n      $nextButton.on(\"click\", event => {\n        this.level += 1;\n        clearInterval(this.refreshIntervalId);\n        $modal.css({display: \"none\"});\n        this.playLevel();\n      });\n\n      this.root.append($modal);\n    }\n\n  };\n\nGameView.prototype.renderButtons = function() {\n\n  // const $button1 = $(\"<a class='planar-check button'>Is Planar?</a>\");\n  const $button2 = $(\"<img class='previous-level button' src='./images/arrow.png'></img>\");\n  const $button3 = $(\"<img class='next-level button' src='./images/arrow.png'></img>\");\n\n  const $canvasDiv = $(\".canvas-div\");\n\n  // $canvasDiv.append($button1);\n  $canvasDiv.append($button2);\n  $canvasDiv.append($button3);\n};\n\nGameView.prototype.checkPlanarity = function() {\n  // $(\".planar-check\").on(\"click\", event => {\n  let planar = true;\n  const game = this.game;\n\n  game.edges.forEach( (edge1, i1) => {\n    game.edges.forEach( (edge2, i2) => {\n      if (i1 !== i2 && edge1.intersectsWith(edge2)) {\n        planar = false;\n      }\n    });\n  });\n\n  console.log(`final: ${planar}`);\n\n  if (planar) {\n    // console.log(\"Yay, you made a planar graph!!\");\n    // this.game.dropVertices();\n    const $modal = $(\".modal\");\n    $modal.css({display: \"block\"});\n  } else {\n    // console.log(\"The graph's not planar quite yet\");\n  }\n\n};\n\nGameView.prototype.bindButtonEvents = function() {\n\n  $(\".previous-level\").on(\"click\", event => {\n    if (this.level > 0) {\n      this.level -= 1;\n      this.playLevel(this.level);\n    }\n  });\n\n  $(\".next-level\").on(\"click\", event => {\n    this.level += 1;\n    this.playLevel(this.level);\n  });\n\n};\n\n\nGameView.prototype.renderGraph = function() {\n  this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n  this.game.edges.forEach( (edge, i) => {\n    edge.currentlyIntersecting(this.game.edges);\n    edge.draw(this.ctx);\n  });\n\n  this.game.vertices.forEach( (vertex, i) => {\n    vertex.draw(this.ctx);\n  });\n\n};\n\nGameView.prototype.bindGraphEvents = function() {\n  // console.log(\"GameView.bindGraphEvents() in game_view.js\");\n\n  $(\"canvas\").on(\"mousedown\", event => {\n    // this.offset = (0, 0);\n    let vertexSelected = false;\n    // console.log(`Mouse Pos: (${this.currentMousePos.x}, ${this.currentMousePos.y})`);\n    // console.log(`Mouse Pos: (${event.pageX}, ${event.pageY})`);\n    console.log(`Vertex Radius: ${Vertex.RADIUS}`);\n    let withinVertex = Math.sqrt(Math.pow(Vertex.RADIUS, 2)*2) + Vertex.RADIUS;\n    console.log(`withinVertex = ${withinVertex}`);\n\n    this.game.vertices.forEach( vertex => {\n      const dist = Util.distFromMouse(vertex, this.currentMousePos);\n      // console.log(`(${vertex.x}, ${vertex.y})`);\n      console.log(dist);\n\n      if (dist < withinVertex && !vertexSelected) {\n        vertex.selected = true;\n        vertex.color = Constants.COLOR_SELECTED;\n        // console.log(`Vertex selected: ${vertex}`);\n\n        // vertex.edges.forEach( edge => {\n        //   edge.color = Constants.LINE_SELECTED;\n        // });\n        vertexSelected = true;\n      }\n    });\n\n  });\n\n  $(\"canvas\").on(\"mouseup\", event => {\n    // console.log(\"mouseup on canvas callback\");\n    this.game.dropVertices();\n    this.checkPlanarity();\n    // this.game.vertices.forEach( vertex => {\n    //   vertex.selected = false;\n    //   vertex.color = Constants.COLOR;\n    // });\n\n    // this.game.edges.forEach( edge => {\n    //   edge.color = Constants.BLACK;\n    // });\n  });\n\n  $(document).mousemove( event => {\n    // console.log(this.currentMousePos);\n    // console.log(`Mouse Pos: (${event.pageX}, ${event.pageY})`);\n    // Dynamically adjust to fit canvas size\n    const yAdjust = -40;\n    const xAdjust = 0;\n\n    this.currentMousePos.x = event.pageX + xAdjust - Game.leftOffset;\n    this.currentMousePos.y = event.pageY + yAdjust;\n  });\n\n};\n\nGameView.prototype.follow = function(game, currentMousePos) {\n  game.vertices.forEach( vertex => {\n    if (vertex.selected) {\n      vertex.x = currentMousePos.x;\n      vertex.y = currentMousePos.y;\n    }\n  });\n\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game_view.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = {\n\tCOLOR: \"#2794EB\",\n  COLOR_SELECTED: \"#47D6B6\",\n  BLACK: \"#000000\",\n  LINE_SELECTED: \"#6150C1\",\n  LINE_INTERSECTING: \"#FF9090\",\n\tRADIUS: 15\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./constants.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}