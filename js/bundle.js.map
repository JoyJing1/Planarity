{"version":3,"sources":["webpack:///webpack/bootstrap e317fcffc28a698c2f16","webpack:///./js/planary.js","webpack:///./js/game.js","webpack:///./constants.js","webpack:///./js/edge.js","webpack:///./js/util.js","webpack:///./js/graph.js","webpack:///./js/vertex.js","webpack:///./js/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8BAA6B,mBAAmB;AAChD,EAAC;;;;;;;ACvBD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAe,sBAAsB;AACrC;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,iBAAiB;;AAElC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oCAAmC,uBAAuB;AAC1D;;AAEA;AACA;;AAEA;AACA,8BAA6B;AAC7B;AACA,uCAAsC;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH,kBAAiB,iBAAiB;AAClC;AACA;AACA,sBAAqB,SAAS;AAC9B,8BAA6B;AAC7B;AACA,kDAAiD;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;ACvHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;;;;;;AC/OA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AChCA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,oBAAmB,QAAQ;AAC3B,wBAAuB,KAAK;AAC5B,sBAAqB,EAAE,GAAG,EAAE;AAC5B;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA,6BAA4B,qCAAqC;AACjE,6BAA4B,qCAAqC;;AAEjE;AACA;AACA;AACA,8BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA,mCAAkC;AAClC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAA+B,+BAA+B;AAC9D;;AAEA,QAAO;;AAEP;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA,sBAAqB,4BAA4B;AACjD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,MAAK;;AAEL;AACA;;AAEA;;AAEA;;;;;;;AC3FA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;;AAEA;;;;;;;ACxCA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAwB,qCAAqC;;AAE7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA4B,gBAAgB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB,iBAAiB;AACtC,IAAG;AACH;AACA;AACA,+BAA8B,iBAAiB;AAC/C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAwB,gBAAgB;AACxC,MAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,IAAG;AACH;AACA;AACA,0BAAyB,gBAAgB;;AAEzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAkB,gBAAgB;AAClC;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+DAA8D,aAAa;AAC3E,+DAA8D,aAAa;AAC3E,+DAA8D,gBAAgB;;AAE9E,oBAAmB,iBAAiB;AACpC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA,uBAAsB,iBAAiB;AACvC,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,MAAK;;AAEL,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e317fcffc28a698c2f16\n **/","\"use strict\";\n\nconst Game = require(\"./game\")\n    , GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  if (window.innerHeight < window.innerWidth) {\n    Game.DIM_X = window.innerHeight * 0.8;\n    Game.DIM_Y = window.innerHeight * 0.8;\n  } else {\n    Game.DIM_X = window.innerWidth;\n    Game.DIM_Y = window.innerWidth;\n  }\n\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const rootEl = $('.planary-root');\n\n  new GameView(ctx, rootEl, {level: 0, stage: 0});\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/planary.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Constants = require('../constants')\n    , Edge = require(\"./edge\")\n    , Graph = require(\"./graph\")\n    , Util = require(\"./util\")\n    , Vertex = require(\"./vertex\");\n\nconst Game = function (options) {\n  // this.vertices = [];\n  // this.edges = [];\n  this.level = options.level || 0;\n  this.stage = options.stage || 0;\n  this.moves = 0;\n\n  this.setPlaySize();\n  this.buildGraph();\n  this.setVertexSize();\n};\n\nGame.prototype.setPlaySize = function() {\n  const $board = $(\".canvas-div\");\n  $board.width(Game.DIM_X).height(Game.DIM_Y);\n\n  Game.leftOffset = (window.innerWidth - Game.DIM_X) / 2;\n  $board.css( {left: Game.leftOffset} );\n};\n\n\nGame.prototype.setVertexSize = function() {\n  Vertex.RADIUS = (Game.DIM_X / this.vertices.length / 10) + 5;\n};\n\nGame.prototype.isPlanar = function() {\n  let planar = true;\n\n  this.edges.forEach( (edge1, i1) => {\n    this.edges.forEach( (edge2, i2) => {\n      if (i1 !== i2 && edge1.intersectsWith(edge2)) {\n        planar = false;\n      }\n    });\n  });\n\n  return planar;\n};\n\nGame.prototype.buildGraph = function() {\n  this.vertices = [];\n  this.edges = [];\n  const n = this.level + 4;\n\n  // Pass in n instead of level\n  const edgeCoords = Graph.generateEdges(n);\n  let numVertices = (n * (n-1)/2);\n\n  if (this.level > 0) {\n    numVertices = (n * (n-1)/2) - (n-1) + this.stage + 1;\n  }\n\n  for (let j = 0; j < numVertices; j++) {\n\n    const xOffset = Game.DIM_X/2;\n    const yOffset = Game.DIM_Y/2;\n\n    const xResize = Game.DIM_X*0.35;\n    const yResize = Game.DIM_Y*0.35;\n\n    const x = Math.cos(j * 2 * Math.PI / numVertices) * xResize + xOffset;\n    const y = Math.sin(j * 2 * Math.PI / numVertices) * xResize + xOffset;\n\n    this.vertices.push(new Vertex({ x: x, y: y, index: j }) );\n  }\n\n  let verticesReached = [];\n  edgeCoords.forEach ( (edgeCoord, i) => {\n\n    if (edgeCoord[0] < numVertices && edgeCoord[1] < numVertices) {\n      const edge = new Edge({ vertex1: this.vertices[edgeCoord[0]],\n                              vertex2: this.vertices[edgeCoord[1]],\n                              idx: i });\n      this.edges.push(edge);\n\n      this.vertices[edgeCoord[0]].edges.push(edge);\n      this.vertices[edgeCoord[1]].edges.push(edge);\n\n      verticesReached.push(edgeCoord[0]);\n      verticesReached.push(edgeCoord[1]);\n    }\n  });\n\n  for (let i = 0; i < numVertices; i++) {\n    if (!verticesReached.includes(i)) {\n      let v2 = 0;\n      if (i === v2) { v2 += 1; }\n      const edge = new Edge({ vertex1: this.vertices[i],\n                              vertex2: this.vertices[v2],\n                              idx: edges.length });\n      this.edges.push(edge);\n\n      this.vertices[i].edges.push(edge);\n      this.vertices[v2].edges.push(edge);\n    }\n  }\n\n  // If graph is already solved, generate new graph\n  if (this.isPlanar()) {\n    this.buildGraph();\n  }\n\n};\n\nGame.prototype.dropVertices = function() {\n  this.vertices.forEach( vertex => {\n    vertex.selected = false;\n    vertex.color = Constants.COLOR;\n  });\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = {\n\tCOLOR: \"#2794EB\",\n  COLOR_SELECTED: \"#47D6B6\",\n  COLOR_NEIGHBOR: \"#4531B1\",\n  BLACK: \"#000000\",\n  WHITE: \"#FFFFFF\",\n  LINE_SELECTED: \"#6150C1\",\n  LINE_INTERSECTING: \"#FF9090\",\n\tRADIUS: 15,\n  EPSILON: 0.00001\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./constants.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Constants = require('../constants')\n    , Util = require(\"./util\");\n\nconst Edge = function(options) {\n  this.vertex1 = options.vertex1;\n  this.vertex2 = options.vertex2;\n  this.idx = options.idx;\n};\n\nEdge.prototype.draw = function(ctx, edges) {\n  if (this.currentlyIntersecting(edges)) {\n    ctx.strokeStyle = Constants.LINE_INTERSECTING;\n    ctx.shadowColor = Constants.LINE_INTERSECTING;\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.moveTo(this.vertex1.x, this.vertex1.y);\n    ctx.lineTo(this.vertex2.x, this.vertex2.y);\n    ctx.stroke();\n\n  } else {\n    ctx.strokeStyle = Constants.BLACK;\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n    ctx.moveTo(this.vertex1.x, this.vertex1.y);\n    ctx.lineTo(this.vertex2.x, this.vertex2.y);\n    ctx.stroke();\n  }\n};\n\nEdge.prototype.slope = function() {\n\n  if (this.vertex1.x === this.vertex2.x) {\n    return 100000;\n  } else if (this.vertex1.x < this.vertex2.x) {\n    return (this.vertex2.y - this.vertex1.y) / (this.vertex2.x - this.vertex1.x);\n  } else {\n    return (this.vertex1.y - this.vertex2.y) / (this.vertex1.x - this.vertex2.x);\n  }\n\n};\n\nEdge.prototype.xIntercept = function() {\n  if (this.isVertical()) {\n    return this.vertex1.x;\n  } else if (this.isHorizontal()) {\n    return 1000000;\n  } else {\n    return -this.yIntercept()/this.slope();\n  }\n};\n\nEdge.prototype.yIntercept = function() {\n  if (this.isVertical()) {\n    return 1000000;\n  } else if (this.isHorizontal()) {\n    return this.vertex1.y;\n  } else {\n    return this.vertex1.y - (this.slope()*this.vertex1.x);\n  }\n};\n\nEdge.prototype.shareVertex = function(edge) {\n  return (\n    this.vertex1 === edge.vertex1\n    || this.vertex1 === edge.vertex2\n    || this.vertex2 === edge.vertex1\n    || this.vertex2 === edge.vertex2\n  );\n};\n\nEdge.prototype.isVertical = function() {\n  return (Math.abs(this.vertex1.x - this.vertex2.x) < Constants.EPSILON);\n};\n\nEdge.prototype.isHorizontal = function() {\n  return (Math.abs(this.vertex1.y - this.vertex2.y) < Constants.EPSILON);\n};\n\nEdge.prototype.intersectsAtX = function(edge) {\n  return (edge.yIntercept() - this.yIntercept()) / (this.slope() - edge.slope());\n};\n\nEdge.prototype.xValue = function(y) {\n  return (y - this.yIntercept())/this.slope();\n};\n\nEdge.prototype.yValue = function(x) {\n  return (this.slope() * x) + this.yIntercept();\n};\n\nEdge.prototype.minX = function() {\n  return Math.min(this.vertex1.x, this.vertex2.x);\n};\n\nEdge.prototype.maxX = function() {\n  return Math.max(this.vertex1.x, this.vertex2.x);\n};\n\nEdge.prototype.minY = function() {\n  return Math.min(this.vertex1.y, this.vertex2.y);\n};\n\nEdge.prototype.maxY = function() {\n  return Math.max(this.vertex1.y, this.vertex2.y);\n};\n\nEdge.prototype.intersectsWith = function(edge) {\n  if (this === edge) {\n    return false;\n\n  } else if (this.vertex1 === edge.vertex1) {\n    let response = false;\n\n    let slope1 = Util.slope(this.vertex1, this.vertex2);\n    let slope2 = Util.slope(edge.vertex1, edge.vertex2);\n\n    if (slope1 === slope2) {\n      response = true;\n    }\n    return response;\n\n  } else if (this.vertex1 === edge.vertex2) {\n    let response = false;\n\n    let slope1 = Util.slope(this.vertex1, this.vertex2);\n    let slope2 = Util.slope(edge.vertex2, edge.vertex1);\n\n    if (slope1 === slope2) {\n      response = true;\n    }\n    return response;\n\n  } else if (this.vertex2 === edge.vertex1) {\n    let response = false;\n\n    let slope1 = Util.slope(this.vertex2, this.vertex1);\n    let slope2 = Util.slope(edge.vertex1, edge.vertex2);\n\n    if (slope1 === slope2) {\n      response = true;\n    }\n    return response;\n\n  } else if (this.vertex2 === edge.vertex2) {\n    let response = false;\n\n    let slope1 = Util.slope(this.vertex2, this.vertex1);\n    let slope2 = Util.slope(edge.vertex2, edge.vertex1);\n\n    if (slope1 === slope2) {\n      response = true;\n    }\n    return response;\n\n  } else if (this.isHorizontal()) {\n    let response = false;\n\n    if (edge.minY()+1 < this.vertex1.y && this.vertex1.y < edge.maxY()-1) {\n      if (edge.isVertical()) {\n        response = true;\n      } else {\n        let xValue = edge.xValue(this.vertex1.y);\n        if (this.minX()+1 < xValue && xValue < this.maxX()-1) {\n          response = true;\n        }\n      }\n    }\n    return response;\n\n  } else if (edge.isHorizontal()) {\n    let response = false;\n    if (this.minY()+1 < edge.vertex1.y && edge.vertex1.y < this.maxY()-1) {\n      if (this.isVertical()) {\n        response = true;\n      } else {\n        let xValue = this.xValue(edge.vertex1.y);\n        if (edge.minX()+1 < xValue && xValue < edge.maxX()-1) {\n          response = true;\n        }\n      }\n    }\n    return response;\n\n  } else if (this.isVertical()) {\n    let response = false;\n    if (edge.minX()+1 < this.vertex1.x && this.vertex1.x < edge.maxX()-1) {\n      if (edge.isHorizontal()) {\n        response = true;\n      } else {\n        let yValue = edge.yValue(this.vertex1.x);\n        if (this.minY()+1 < yValue && yValue < this.maxY()-1) {\n          response = true;\n        }\n      }\n    }\n    return response;\n\n  } else if (edge.isVertical()){\n    let response = false;\n\n    if (this.minX()+1 < edge.vertex1.x && edge.vertex1.x < this.maxX()-1) {\n      if (this.isHorizontal()) {\n        response = true;\n      } else {\n        let yValue = this.yValue(edge.vertex1.x);\n        if (edge.minY()+1 < yValue && yValue < edge.maxY()-1) {\n          response = true;\n        }\n      }\n    }\n    return response;\n\n  } else if (this.slope() === edge.slope()) {\n    return false;\n\n  } else {\n    const x = this.intersectsAtX(edge);\n    const y = this.yValue(x);\n\n    const xWithinRange = (this.minX()+1 < x && x < this.maxX()-1 && edge.minX()+1 < x && x < edge.maxX()-1);\n    const yWithinRange = (this.minY()+1 < y && y < this.maxY()-1 && edge.minY()+1 < y && y < edge.maxY()-1);\n\n    return xWithinRange && yWithinRange;\n  }\n};\n\nEdge.prototype.currentlyIntersecting = function(allEdges) {\n  let intersecting = false;\n\n  allEdges.forEach( edge => {\n    if (this.intersectsWith(edge)) {\n      intersecting = true;\n    }\n  });\n  return intersecting;\n};\n\nmodule.exports = Edge;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/edge.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Util = {\n  slope(vertex1, vertex2) {\n    return (vertex2.y - vertex1.y) / (vertex2.x - vertex1.x);\n  },\n\n  xIntercept(vertex, slope) {\n    return vertex.y - (slope * vertex.x);\n  },\n\n  // yIntercept(vertex, slope) {\n  //   return vertex.y - (slope * vertex.x);\n  // },\n\n  dist(vertex1, vertex2) {\n    return Math.sqrt(\n      Math.pow(vertex1.x - vertex2.x, 2)\n        + Math.pow(vertex1.y - vertex2.y, 2)\n    );\n  },\n\n  distFromMouse(vertex, currentMousePos) {\n    const vertexRadius = 12.5;\n\n    return Math.sqrt(\n      Math.pow(vertex.x + vertexRadius - currentMousePos.x, 2) + Math.pow(vertex.y + vertexRadius - currentMousePos.y, 2)\n    );\n  }\n\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/util.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Edge = require(\"./edge\")\n    , Util = require(\"./util\")\n    , Vertex = require(\"./vertex\");\n\nconst Graph = {\n\n  pairIndex(n) {\n    let pairIndex = {};\n\n    let vertexIdx = 0;\n    for (let i = 0; i <= n; i++) {\n      for (let j = i+1; j<n; j++) {\n        pairIndex[`${i},${j}`] = vertexIdx;\n        vertexIdx++;\n      }\n    }\n\n    return pairIndex;\n  },\n\n  generateLines(n) {\n    let lines = [];\n    let slopes = [];\n\n    while (lines.length < n) {\n      let v1 = new Vertex( { x: Math.random(), y: Math.random() });\n      let v2 = new Vertex( { x: Math.random(), y: Math.random() });\n\n      let slope = Util.slope(v1, v2);\n      // let inverseSlope = Util.slope(v2, v1);\n      if (!slopes.includes(slope)) {\n        let line = new Edge({ vertex1: v1, vertex2: v2, idx: lines.length});\n        lines.push(line);\n      }\n    }\n    return lines;\n  },\n\n  generateEdges(n) {\n    // Build pairIndex hash from { [pair]: indexOfVertex }\n    let pairIndex = this.pairIndex(n);\n\n    // Generate n * (n-1)/2 random lines of differing slope\n    const lines = this.generateLines(n);\n\n    // For each line, find the intersection points\n    // of that line with all other lines\n    let edges = [];\n    lines.forEach( (line1, i1) => {\n      let intersections = [];\n\n      lines.forEach( (line2, i2) => {\n        if (i1 !== i2) {\n          let intersection = line1.intersectsAtX(line2);\n          intersections.push( { x: intersection, lineIdx: i2 } );\n        }\n\n      });\n\n      // Order lines by intersection point's X coord\n      intersections.sort( (intersect1, intersect2) => {\n        return intersect1.x - intersect2.x;\n      });\n\n      // For each pair of neighboring intersections\n      // create a new edge between them\n      for (let i = 0; i < intersections.length-1; i++) {\n        let l1 = intersections[i];\n        let l2 = intersections[i+1];\n\n        let indices1 = [i1, l1.lineIdx];\n        let indices2 = [i1, l2.lineIdx];\n\n        indices1.sort( (a, b) => a-b  );\n        indices2.sort( (a, b) => a-b  );\n\n        let v1 = pairIndex[indices1];\n        let v2 = pairIndex[indices2];\n\n        edges.push([v1, v2]);\n      }\n\n    });\n\n    return edges;\n  }\n\n};\n\nmodule.exports = Graph;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/graph.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Constants = require('../constants');\n\nconst Vertex = function(options) {\n  this.index = options.index;\n  this.x = options.x;\n  this.y = options.y;\n  this.color = Constants.COLOR;\n  this.radius = Constants.RADIUS;\n  this.edges = [];\n  this.selected = false;\n};\n\nVertex.prototype.pos = function() {\n  return [this.x, this.y];\n};\n\nVertex.prototype.draw = function(ctx) {\n  ctx.fillStyle = this.color;\n  ctx.shadowBlur = 10;\n  ctx.shadowColor = this.color;\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, Vertex.RADIUS, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nVertex.prototype.neighbors = function() {\n  let neighbors = [];\n\n  this.edges.forEach( edge => {\n    if (edge.vertex1 === this) {\n      neighbors.push(edge.vertex2);\n    } else {\n      neighbors.push(edge.vertex1);\n    }\n  });\n  return neighbors;\n};\n\nmodule.exports = Vertex;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/vertex.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\n\nconst Constants = require('../constants')\n    , Game = require(\"./game\")\n    , Util = require(\"./util\")\n    , Vertex = require('./vertex');\n\nconst GameView = function (ctx, root, options) {\n  this.ctx = ctx;\n  this.root = root;\n  this.currentMousePos = { x: -1, y: -1 };\n  this.level = options.level || 0;\n  this.stage = options.stage || 0;\n\n  this.renderButtons();\n  this.bindButtonEvents();\n  this.bindGraphEvents();\n  this.renderRules();\n  this.playLevel(this.level);\n};\n\nGameView.prototype.playLevel = function() {\n  this.game = new Game({level: this.level, stage: this.stage});\n\n  this.renderGraph();\n  this.renderModal();\n\n  let that = this;\n  function playGame() {\n    that.follow(that.game, that.currentMousePos);\n    that.renderGraph();\n    requestAnimationFrame(playGame);\n  }\n  requestAnimationFrame(playGame);\n};\n\nGameView.prototype.levelUp = function() {\n  this.stage += 1;\n  this.game.moves = 0;\n\n  if (this.stage > 0) {\n    $(\".description\").css( {display: \"none\"} );\n  }\n\n  if (this.level === 0 || this.stage >= this.level + 3) {\n    this.level += 1;\n    this.stage = 0;\n  }\n};\n\nGameView.prototype.levelDown = function() {\n  this.stage -= 1;\n  this.game.moves = 0;\n  if (this.stage < 0) {\n    this.level -= 1;\n    this.stage = this.level + 3;\n  }\n};\n\nGameView.prototype.renderRules = function() {\n  const prevRules = document.getElementsByClassName(\"rules\");\n\n  if (prevRules.length > 0) {\n    const $rulesModal = $(prevRules[0]);\n    $rulesModal.css({display: \"block\"});\n  } else {\n    const $rulesModal = $(\"<div>\").addClass(\"modal\")\n                        .addClass(\"rules\")\n                        .css({display: \"block\"});\n    const $rulesContent = $(\"<div>\").addClass(\"modal-content\");\n    const $rules = $(\"<p>\").text(\"Can you detangle the web? Move the nodes around until none of the lines intersect.\");\n\n    $rulesContent.append($rules);\n    $rulesModal.append($rulesContent);\n\n    const $playButton = $(\"<a>\").text(\"Play\")\n                        .addClass(\"button\")\n                        .addClass(\"play\");\n\n    $rulesContent.append($playButton);\n\n    $playButton.on(\"click tap\", event => {\n      $rulesModal.css( {display: \"none\"} );\n    });\n\n    this.root.append($rulesModal);\n  }\n\n};\n\nGameView.prototype.renderModal = function() {\n  const prevModals = document.getElementsByClassName(\"win-modal\");\n\n  if (prevModals.length > 0) {\n    const $modal = $(prevModals[0]);\n\n  } else {\n    const $modal = $(\"<div>\").addClass(\"modal\")\n                  .addClass(\"win-modal\")\n                  .css( {display: \"none\"} );\n\n    const $modalContent = $(\"<div>\").addClass(\"modal-content\");\n    const $congrats = $(\"<h2>\").text(\"Congratulations, the graph is planar!\");\n\n    const $stats = $(\"<p>\");\n    const $level = $(\"<div>\").addClass(\"results level\");\n    const $stage = $(\"<div>\").addClass(\"results stage\");\n    const $moves = $(\"<div>\").addClass(\"results moves\");\n\n    $stats.append($level);\n    $stats.append($stage);\n    $stats.append($moves);\n\n    $modalContent.append($congrats);\n    $modalContent.append($stats);\n    $modal.append($modalContent);\n\n    const $nextButton = $(\"<a>\").text(\"Next Level\")\n                        .addClass(\"button\")\n                        .addClass(\"next-level-modal\");\n\n    $modalContent.append($nextButton);\n\n    $nextButton.on(\"click tap\", event => {\n      event.stopPropagation();\n      event.preventDefault();\n\n      this.levelUp();\n      $modal.css({display: \"none\"});\n      cancelAnimationFrame(this.refreshIntervalId);\n      this.playLevel();\n    });\n\n    this.root.append($modal);\n  }\n\n};\n\nGameView.prototype.renderButtons = function() {\n\n  const $button2 = $(\"<div>\").addClass(\"buton\").addClass(\"nav\").addClass(\"previous-level\");\n  const $button3 = $(\"<div>\").addClass(\"buton\").addClass(\"nav\").addClass(\"next-level\");\n  const $github = $(`<a href=\"https://github.com/joyjing1\"><div class=\"button github\"/></a>`);\n\n  const $buttonRules = $(\"<a>\").addClass(\"button\")\n                        .addClass(\"show-rules\")\n                        .text(\"Rules\");\n  const $canvasDiv = $(\".canvas-div\");\n\n  $canvasDiv.append($button2);\n  $canvasDiv.append($button3);\n  $canvasDiv.append($github);\n  $canvasDiv.append($buttonRules);\n};\n\nGameView.prototype.checkPlanarity = function() {\n  if (this.game.isPlanar()) {\n    const $winModal = $(\".win-modal\");\n\n    const $stats = $(\"<p>\");\n    const $level = $(\".level\").empty().append(`Level: <span>${this.level+1}</span>`);\n    const $stage = $(\".stage\").empty().append(`Stage: <span>${this.stage+1}</span>`);\n    const $moves = $(\".moves\").empty().append(`Moves: <span>${this.game.moves}</span>`);\n\n    $winModal.css({display: \"block\"});\n  }\n};\n\nGameView.prototype.bindButtonEvents = function() {\n\n  $(\".previous-level\").on(\"click tap\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    if (this.level > 0) {\n      this.levelDown();\n      this.playLevel(this.level);\n    }\n  });\n\n  $(\".next-level\").on(\"click tap\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    this.levelUp();\n    this.playLevel(this.level);\n  });\n\n  $(\".show-rules\").on(\"click tap\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    $(\".rules\").css( {display: \"block\"} );\n  });\n\n};\n\nGameView.prototype.renderGraph = function() {\n  this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n  this.game.edges.forEach( (edge, i) => {\n    edge.draw(this.ctx, this.game.edges);\n  });\n\n  this.game.vertices.forEach( (vertex, i) => {\n    vertex.draw(this.ctx);\n  });\n\n};\n\nGameView.prototype.bindGraphEvents = function() {\n\n  $(\"canvas\").on(\"mousedown touchstart\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let vertexSelected = false;\n    let withinVertex = 30;\n\n    if (Vertex.RADIUS > 7) {\n      withinVertex += (Vertex.RADIUS - 7);\n    }\n\n    this.game.vertices.forEach( vertex => {\n      const dist = Util.distFromMouse(vertex, this.currentMousePos);\n\n      if (dist < withinVertex && !vertexSelected) {\n        this.game.moves += 1;\n\n        vertex.selected = true;\n        vertex.color = Constants.COLOR_SELECTED;\n        vertexSelected = true;\n\n        vertex.neighbors().forEach(neighbor => {\n          neighbor.color = Constants.COLOR_NEIGHBOR;\n        });\n      }\n    });\n\n  });\n\n  $(document).on(\"mouseup touchend\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    this.game.dropVertices();\n    this.checkPlanarity();\n  });\n\n  $(document).mousemove( event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const yAdjust = -40;\n    const xAdjust = 0;\n\n    this.currentMousePos.x = event.pageX + xAdjust - Game.leftOffset;\n    this.currentMousePos.y = event.pageY + yAdjust;\n  });\n\n  document.addEventListener(\"touchmove\", event => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let touch = event.touches[0];\n\n    if (touch) {\n      const yAdjust = -40;\n      const xAdjust = 0;\n\n      this.currentMousePos.x = touch.pageX + xAdjust - Game.leftOffset;\n      this.currentMousePos.y = touch.pageY + yAdjust;\n    }\n  });\n\n};\n\nGameView.prototype.follow = function(game, currentMousePos) {\n  game.vertices.forEach( vertex => {\n    if (vertex.selected) {\n      let newX = Math.min(Math.max(currentMousePos.x, Vertex.RADIUS), Game.DIM_X-Vertex.RADIUS);\n      let newY = Math.min(Math.max(currentMousePos.y, Vertex.RADIUS), Game.DIM_Y-Vertex.RADIUS);\n\n      vertex.x = newX;\n      vertex.y = newY;\n    }\n  });\n\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game_view.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}