{"version":3,"sources":["webpack:///webpack/bootstrap 9fb572b2b364adfb4e34","webpack:///./js/planary.js","webpack:///./js/game.js","webpack:///./js/edge.js","webpack:///./js/util.js","webpack:///./js/vertex.js","webpack:///./js/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA,KAAI;;;;;;;AC7BJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA,kBAAiB,mBAAmB;AACpC;AACA;;AAEA,oCAAmC,uBAAuB;AAC1D;;AAEA;AACA,0BAAyB,2EAA2E;AACpG;AACA,IAAG;;AAEH;;;;;;AAMA;AACA,IAAG;AACH;AACA;AACA;;AAEA;;;;;;;AC1CA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACzBA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,YAAY,4BAA4B,gCAAgC,iBAAiB,mBAAmB,mBAAmB,kBAAkB,wBAAwB,yCAAyC,4CAA4C,uCAAuC,wCAAwC,oCAAoC;AACha;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,mEAAmE;AAC5F,SAAQ;AACR,0BAAyB,mEAAmE;AAC5F;AACA;;;;AAIA;;AAEA;;;;;;;AC/FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,8BAA6B,EAAE,KAAK,SAAS,IAAI,SAAS;AAC1D;AACA,qCAAoC,EAAE;AACtC;AACA,2BAA0B,0CAA0C;AACpE;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,yBAAwB,EAAE;AAC1B,yBAAwB,eAAe,IAAI,eAAe;AAC1D,yBAAwB,eAAe,IAAI,eAAe;;AAE1D,0BAAyB,mBAAmB;AAC5C,0BAAyB,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sCAAqC,EAAE;AACvC;AACA,4BAA2B,aAAa,OAAO,IAAI;AACnD,4BAA2B,wBAAwB,MAAM,kBAAkB,IAAI,iBAAiB,EAAE,MAAM;AACxG;AACA,oCAAmC,eAAe,eAAe,eAAe,GAAG;;AAEnF;;AAEA,4BAA2B,EAAE;AAC7B,qBAAoB,aAAa,OAAO,KAAK;AAC7C,qCAAoC,MAAM;;AAE1C;AACA;;AAEA;AACA;AACA,sCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA,6BAA4B,GAAG;AAC/B,6BAA4B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;;AAEA,IAAG;;AAEH;;AAEA","file":"./js/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9fb572b2b364adfb4e34\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const rootEl = $('.planary-root');\n  const game = new Game(0);\n\n  console.log('created ctx & game in planary.js');\n  console.log(ctx);\n  console.log(game);\n  // debugger;\n  new GameView(game, ctx, rootEl);\n});\n\n// jsPlumb.bind(\"ready\", function() {\n// // your jsPlumb related init code goes here\n//   console.log(\"inside jsPlum.bind callback\");\n//\n// });\n\n// jsPlumb.ready(function() {\n// // your jsPlumb related init code goes here\n//   console.log(\"inside jsPlum.ready callback\");\n//\n// });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/planary.js\n ** module id = 0\n ** module chunks = 0\n **/","const Edge = require(\"./edge\");\nconst Vertex = require(\"./vertex\");\nconst Util = require(\"./util\");\n\nconst Game = function (level = 0) {\n  this.vertices = [];\n  this.edges = [];\n\n  this.buildGraph(level);\n};\n\nGame.DIM_X = 800;\nGame.DIM_Y = 800;\n\n\nGame.prototype.buildGraph = function (level) {\n  let game = Game.LEVELS[level];\n\n  for (let i = 0; i < game.vertices; i++) {\n    let x = Math.cos(i * 2 * Math.PI / game.vertices) * 300 + 400;\n    let y = Math.sin(i * 2 * Math.PI / game.vertices) * 300 + 400;\n\n    this.vertices.push(new Vertex({ x: x, y: y, index: i }) );\n  }\n\n  game.edges.forEach ( vertices => {\n    let edge = new Edge({ vertex1: this.vertices[vertices[0]], vertex2: this.vertices[vertices[1]] });\n    this.edges.push(edge);\n  });\n\n};\n\n\n\n\n\nGame.LEVELS = [\n  { vertices: 6,\n    edges: [ [0,2], [0,4], [1,4], [1,5], [2,3], [2,4], [2,5], [3,5] ]\n  }\n];\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const Util = require(\"./util\");\n\nconst Edge = function (options) {\n  this.vertex1 = options.vertex1;\n  this.vertex2 = options.vertex2;\n};\n\nEdge.prototype.draw = function (ctx) {\n  ctx.beginPath();\n  ctx.moveTo(this.vertex1.x, this.vertex1.y);\n  ctx.lineTo(this.vertex2.x, this.vertex2.y);\n  // ctx.moveTo(this.vertex1.y, this.vertex1.x);\n  // ctx.lineTo(this.vertex2.y, this.vertex2.x);\n  ctx.stroke();\n};\n\nEdge.prototype.intersectsWith = function (edge) {\n  const x = (edge.xIntercept - this.xIntercept) / (this.slope - edge.slope);\n\n  let min = Math.min(this.x, edge.x);\n  let max = Math.max(this.x, edge.x);\n\n  return (min <= x && x <= max);\n};\n\nmodule.exports = Edge;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/edge.js\n ** module id = 2\n ** module chunks = 0\n **/","const Util = {\n  slope (pos1, pos2) {\n    return (pos2[1] - pos1[1]) / (pos2[0] - pos1[0]);\n  },\n\n  xIntercept (pos, slope) {\n    return pos[1] - (slope * pos[0]);\n  },\n\n  dist (vertex1, vertex2) {\n    return Math.sqrt(\n      Math.pow(vertex1.x - vertex2.x, 2) + Math.pow(vertex1.y - vertex2.y, 2)\n    );\n  },\n\n  angle (vertex1, vertex2) {\n    const diffY = vertex2.y - vertex1.y;\n    const diffX = vertex2.x - vertex1.x;\n    const radians = Math.atan( diffY / diffX );\n    return radians;\n    // return radians / 2 / Math.PI * 360;\n  }\n\n  // getOffset( el ) {\n  //     var rect = el.getBoundingClientRect();\n  //     return {\n  //         left: rect.left + window.pageXOffset,\n  //         top: rect.top + window.pageYOffset,\n  //         width: rect.width || el.offsetWidth,\n  //         height: rect.height || el.offsetHeight\n  //     };\n  // },\n  //\n  // connect(div1, div2, color, thickness) { // draw a line connecting elements\n  //   var off1 = this.getOffset(div1);\n  //   var off2 = this.getOffset(div2);\n  //   // bottom right\n  //   var x1 = off1.left + off1.width;\n  //   var y1 = off1.top + off1.height;\n  //   // top right\n  //   var x2 = off2.left + off2.width;\n  //   var y2 = off2.top;\n  //   // distance\n  //   var length = Math.sqrt(((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)));\n  //   // center\n  //   var cx = ((x1 + x2) / 2) - (length / 2);\n  //   var cy = ((y1 + y2) / 2) - (thickness / 2);\n  //   // angle\n  //   var angle = Math.atan2((y1-y2),(x1-x2))*(180/Math.PI);\n  //   // make hr\n  //   var htmlLine = \"<div style='padding:0px; margin:0px; height:\" + thickness + \"px; background-color:\" + color + \"; line-height:1px; position:absolute; left:\" + cx + \"px; top:\" + cy + \"px; width:\" + length + \"px; -moz-transform:rotate(\" + angle + \"deg); -webkit-transform:rotate(\" + angle + \"deg); -o-transform:rotate(\" + angle + \"deg); -ms-transform:rotate(\" + angle + \"deg); transform:rotate(\" + angle + \"deg);' />\";\n  //   //\n  //   // alert(htmlLine);\n  //   document.body.innerHTML += htmlLine;\n  // },\n  //\n  // lineDistance(x, y, x0, y0){\n  //     return Math.sqrt((x -= x0) * x + (y -= y0) * y);\n  // },\n  //\n  // drawLine(a, b, line) {\n  //   var pointA = $(a).offset();\n  //   var pointB = $(b).offset();\n  //   var pointAcenterX = $(a).width() / 2;\n  //   var pointAcenterY = $(a).height() / 2;\n  //   var pointBcenterX = $(b).width() / 2;\n  //   var pointBcenterY = $(b).height() / 2;\n  //   var angle = Math.atan2(pointB.top - pointA.top, pointB.left - pointA.left) * 180 / Math.PI;\n  //   var distance = lineDistance(pointA.left, pointA.top, pointB.left, pointB.top);\n  //\n  //   // INFO\n  //   $('.info .point-a').text('Point-A: Left: ' + pointA.left + ' Top: ' + pointA.top);\n  //   $('.info .point-b').text('Point-B: Left: ' + pointB.left + ' Top: ' + pointB.top);\n  //   $('.info .angle').text('Angle: ' + angle);\n  //   $('.info .distance').text('Distance: ' + distance);\n  //\n  //   // Set Angle\n  //   $(line).css('transform', 'rotate(' + angle + 'deg)');\n  //\n  //   // Set Width\n  //   $(line).css('width', distance + 'px');\n  //\n  //   // Set Position\n  //   $(line).css('position', 'absolute');\n  //   if(pointB.left < pointA.left) {\n  //     $(line).offset({top: pointA.top + pointAcenterY, left: pointB.left + pointBcenterX});\n  //   } else {\n  //     $(line).offset({top: pointA.top + pointAcenterY, left: pointA.left + pointAcenterX});\n  //   }\n  // }\n\n\n\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/util.js\n ** module id = 3\n ** module chunks = 0\n **/","const DEFAULTS = {\n\tCOLOR: \"#2794EB\",\n\tRADIUS: 15\n};\n\nconst Vertex = function(options) {\n  this.index = options.index;\n  this.x = options.x;\n  this.y = options.y;\n  this.color = DEFAULTS.COLOR;\n  this.radius = DEFAULTS.RADIUS;\n};\n\nVertex.prototype.pos = function() {\n  return [this.x, this.y];\n};\n\nVertex.prototype.draw = function(ctx) {\n  ctx.fillStyle = this.color;\n  ctx.beginPath();\n  ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n  ctx.fill();\n};\n\nmodule.exports = Vertex;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/vertex.js\n ** module id = 4\n ** module chunks = 0\n **/","const Util = require(\"./util\");\n\nconst GameView = function (game, ctx, root) {\n  this.ctx = ctx;\n  this.game = game;\n  this.root = root;\n\n  this.render();\n  // Add click handlers\n};\n\nGameView.prototype.render = function() {\n  // this.game.edges.forEach( edge => {\n  //   edge.draw(this.ctx);\n  // });\n\n  this.game.vertices.forEach( (vertex, i) => {\n    // vertex.draw(this.ctx);\n    const $vertex = $(\"<div>\")\n                    .text(`${i}: (${vertex.x}, ${vertex.y})`)\n                    .addClass(\"vertex\")\n                    .attr('id', `v${i}`)\n                    .draggable()\n                    .css({ 'top': vertex.y-12, 'left': vertex.x-12 })\n                    .attr(\"data-pos\", [vertex.x, vertex.y]);\n    this.root.append($vertex);\n  });\n\n  this.game.edges.forEach( (edge, i) => {\n    // let x1 = edge.vertex1;\n    // let y1 = edge.vertex2;\n\n    let length = Util.dist(edge.vertex1, edge.vertex2);\n    let angle = Util.angle(edge.vertex1, edge.vertex2);\n    console.log(`edge ${i}`);\n    console.log(`v1 = ${edge.vertex1.x}, ${edge.vertex1.y}`);\n    console.log(`v2 = ${edge.vertex2.x}, ${edge.vertex2.y}`);\n\n    const $div1 = $(`#e${edge.vertex1.index}`);\n    const $div2 = $(`#e${edge.vertex2.index}`);\n\n    const $edge = $(\"<div>\");\n    edge.draw(this.ctx);\n    // debugger;\n    // Util.connect($div1, $div2, \"red\", 3);\n    // Util.drawLine($div1, $div2, $edge);\n    // debugger;\n    // edge.vertex2;\n    //\n    // Util.connect()\n\n    // Need to calculate minX, minY, diffX, diffY\n\n    // debugger;\n    // const $edge = $(\"<div>\")\n    //               .attr('id', `e${i}`)\n    //               .addClass(\"edge\")\n    //               .css({ 'width': `${length}px`})\n    //               .css({ 'transform': `rotate(${angle}rad) translateY(${100}px) translateX(${0}px)` });\n// edge.vertex1.x - edge.vertex2.x)/2\n                  //  translateX(${edge.vertex1.x}) translateY(${edge.vertex1.y})`});\n\n                  // debugger;\n\n    const $myEdge = $(`#e${i}`);\n    // $myEdge.css({ 'width': `${length}px` });\n// // , `webkit-transform: rotate(${angle}deg)`\n\n    // $edge.addClass(\"edge\");\n    this.root.append($edge);\n\n    // edge.draw();\n    //\n    // const $edge = $(`<line id=\"e${i}\"/>`);\n    //\n    // const v1 = edge.vertex1.index;\n    // const v2 = edge.vertex2.index;\n    //\n    // const $div1 = $(`.v${v1}`);\n    // const $div2 = $(`.v${v2}`);\n    //\n    // const pos1 = $div1.position();\n    // const pos2 = $div2.position();\n    //\n    // // $(document.createElementNS('http://www.w3.org/2000/svg','line')).attr({\n    // //     x1: pos1.left,\n    // //     y1: pos1.top,\n    // //     x2: pos2.left,\n    // //     y2: pos2.top,\n    // //     stroke: \"black\",\n    // //     stroke-width: \"2\"\n    // // }).appendTo(this.root);\n    //\n    // // debugger;\n    //\n    // $edge.attr('x1',pos1.left)\n    //       .attr('x1',pos1.left)\n    //       .attr('y1',pos1.top)\n    //       .attr('x2',pos2.left)\n    //       .attr('y2',pos2.top);\n    //       // .attr('style', \"stroke:red; stroke-width:10px\")\n    //\n    // const $svg = $(\".svg-root\");\n    // $svg.append($edge);\n    // this.root.append($svg);\n\n  });\n\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/game_view.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}